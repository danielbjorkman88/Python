
strings:
S.replace("-", "") #Trims the string for "-"
reversedString = reverse(string):

vector:
states = [0]*len(S) 


dictionaries:
matched = {')':'(',       #Gives you back the matched item
           '}':'{',
           ']':'['  }
mydict = {}
mydict[(3,4,3)] = 1
print(mydict[(3,4,3)])
for keys, vals in mydict.iteritems():
    print('my {} is {}'.format(keys,vals))

Stack:
stack = [] 
stack.append('a')
stack.append('b') 
print(stack.pop()) # == 'b' 


counting:
from statistics import mode
mode([1, 2, 4, 5, 6, 6, 6]) # find most common element in array
Counter(A).most_common()[0] # Doesnt distinguish two leading numbers

List:
my_list = []
my_list.insert(0,2) # inserts 2 at index 0

if:
	pass
	continue
	break



testing:
vec = list(range(10)) #Gör en vector med ökande värden
N= 10
arr = np.random.randint(0,10,N) #Random int vector as storlek 10
maximum = float("-inf") # super low number

lambda, map:
a = list(map(lambda x : math.pow(x,2) /2 , vec))


time:
import time
start_time = time.time()
print(Solution(A))
print("--- %s seconds for Solution ---" % (time.time() - start_time))



Class:
class Node(object):

    def __init__(self, data=None, next_node=None):
        self.data = data
        self.next_node = next_node

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next_node

    def set_next(self, new_next):
        self.next_node = new_next
curr = root
prev = None

while curr != None:
    #print curr.data
    nextone = curr.next_node
    curr.next_node = prev
    prev = curr
    curr = nextone

count factors:
count = 0
i = 1

while i**2 < N:
    if N%i:
        pass
    else:
        count +=2

    i +=1
if i**2 == N:
    count += 1

Time complexity:

in operator:
list - Average: O(n)
set/dict - Average: O(1), Worst: O(n)
